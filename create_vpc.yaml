---
 - hosts: localhost
   gather_facts: yes
   module_defaults:
     group/aws:
       region: "us-east-2"
   tasks: 
    - name: create vpc
      ec2_vpc_net:
        name: Module5-vpc
        cidr_block: 10.0.0.0/16
        tags:
          Module: 5
        region: "us-east-2"
        state: present
      register: vpc
    - name: create public subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: m5-public-sn1
          Module: 5
        cidr: 10.0.1.0/24
        az: us-east-2c
        region: "us-east-2"
        state: present
      register: public_subnet1
    - name: create public subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: m5-public-sn2
          Module: 5
        cidr: 10.0.4.0/24
        az: us-east-2c
        region: "us-east-2"
        state: present
      register: public_subnet2
    - name: Create private subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: m5-private-sn1
          Module: 5
        cidr: 10.0.2.0/24
        region: "us-east-2"
        az: us-east-2a
        state: present
      register: private_subnet1
    - name: Create private subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: m5-private-sn2
          Module: 5
        cidr: 10.0.3.0/24
        region: "us-east-2"
        az: us-east-2b
        state: present
      register: private_subnet2
    - name: create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 ig
        state: present
      register: igw
    - name: Create nat gateway
      ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnet1.subnet.id }}"
        wait: yes
        eip_address: 3.132.8.216 
        if_exist_do_not_create: true
        state: present
      register: nat
    - name: Create public route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 public rt
        subnets: 
          - "{{ public_subnet1.subnet.id }}"
          - "{{ private_subnet1.subnet.id }}"
          - "{{ private_subnet2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        state: present
      register: public_rt
    - name: Create private route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 private rt
        subnets:
          - "{{ private_subnet1.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat.nat_gateway_id }}"
        state: present
      register: private_rt
    - name: Create developer security Groups
      ec2_group:
        name: Module5-developer-sg
        description: developer security group
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
              - 5000
              - 443
              - 1024-65535
            cidr_ip: 0.0.0.0/0
            rule_desc: allowed rules
        state: present
      register: developer_sg
    - name: Create rds security group
      ec2_group:
        name: module5-rds-sg
        description: rds security group
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
        state: present
      register: rds_sg
    - name: Create default rds security group
      ec2_group:
        name: m5-default-rds-sg
        description: rds default security group
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: all
            group_name: m5-default-rds-sg
        state: present
      register: default_rds_sg
    - name: create RDS subnet group
      rds_subnet_group:
        name: m5-rds-sng
        description: private subnet group for m5 rds
        subnets:
          - "{{ private_subnet1.subnet.id }}"
          - "{{ private_subnet2.subnet.id }}"
        state: present
      register: rds_sng
#    - name: debug
#      debug:
#        var: rds_sg
    - name: Create RDS instance
      rds:
        command: create
        instance_name: m5-ig-rds
        db_engine: postgres
        size: 10
        instance_type: db.t2.micro
        username: postgres
        password: Blu91984
        vpc_security_groups: 
          - "{{ rds_sg.group_id }}"
        subnet: m5-rds-sng
      register: rds 
    - name: Create public Network ACL
      ec2_vpc_nacl:
        vpc_id: "{{ vpc.vpc.id }}"
        name: m5-public-acl
        region: us-east-2
        subnets: 
          - "{{ public_subnet1.subnet.id }}"
          - "{{ public_subnet2.subnet.id }}"
        ingress:
            # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
            #                                             port from, port to
            - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
            - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 5000, 5000]
            - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
            - [400, 'tcp', 'allow', '0.0.0.0/0', null, null, 25, 25]
            - [500, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
            - [600, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
        egress:
            - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
            - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
            - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
            - [400, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
            - [500, 'tcp', 'allow', '0.0.0.0/0', null, null, 5432, 5432]
        state: 'present'
    - name: Create private Network ACL
      ec2_vpc_nacl:
        name: m5-private-acl
        region: us-east-2
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
          -  "{{ private_subnet1.subnet.id }}"
        tags:
          Name: m5-private-acl
        ingress:
            # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
            #                                             port from, port to
            - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
            - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
            - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
            - [400, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
            - [500, 'tcp', 'allow', '0.0.0.0/0', null, null, 5432, 5432]
        egress:
            - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
            - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
            - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
        state: 'present'
    - name: create lauch template
      ec2_launch_template:
        name: m5_launch_template
        image_id: ami-026dea5602e368e96
        key_name: AuburnKeyPair
        instance_type: t2.micro
        network_interfaces:
          - associate_public_ip_address: yes
            device_index: 0
            groups:
              - '{{ rds_sg.group_id }}'
        iam_instance_profile: image-gallery-role
        user_data: "{{ lookup('file', '~/ansible/startup-scripts/ec2_startup.sh') | b64encode }}"
        state: present
      register: lt
    - name: create target group
      elb_target_group:
        name: m5-tg
        protocol: tcp
        stickiness_enabled: no
        stickiness_type: source_ip
        deregistration_delay_timeout: 300
        port: 80
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: tg
    - name: Create auto scaling group
      ec2_asg:
        name: m5-asg
        launch_template:
          launch_template_name: m5_launch_template
        desired_capacity: 2
        min_size: 2
        max_size: 4
        target_group_arns: "{{tg.target_group_arn }}"
        availability_zones: [ 'us-east-2c' ]
        health_check_type: EC2
        termination_policies: Default
        vpc_zone_identifier: 
          - '{{ public_subnet1.subnet.id }}'
          - '{{ public_subnet2.subnet.id }}' 
        state: present
      register: asg
    - name: Provision Mike M5 ec2 instances
      ec2:
        key_name: AuburnKeyPair
        group: module5-rds-sg
        instance_type: t3.micro
        image: ami-026dea5602e368e96
        instance_tags:
          Name: Module5 Mike
          Module: 5
        wait: yes
        vpc_subnet_id: "{{ public_subnet1.subnet.id }}"
        assign_public_ip: yes
        exact_count: 1
        count_tag:
          Name: Module5 Mike
        user_data: "{{ lookup('file', '~/ansible/startup-scripts/start.sh') }}"
